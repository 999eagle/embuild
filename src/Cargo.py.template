# Cargo <-> PlatformIO integration script (autogenerated by cargo-pio)
# Calling 'pio run' will also build the Rust library crate by invoking Cargo

import os

Import("env")

def run_cargo(source, target, env):
    rust_lib = env.GetProjectOption("rust_lib")
    rust_target = env.GetProjectOption("rust_target")

    cargo_options = env.GetProjectOption("cargo_options", default = "")

    cargo_profile = env.GetProjectOption(
        "cargo_profile",
        default = "release" if env.GetProjectOption("build_type") == "release" else "debug")

    cargo_target_dir = env.GetProjectOption(
        "cargo_target_dir",
        default = os.path.join("$PROJECT_BUILD_DIR", "cargo")
            if env.GetProjectOption("cargo_pio_common_build_dir", default = False)
            else os.path.join("$PROJECT_DIR", "target"))

    board_mcu = env.get("BOARD_MCU")
    if not board_mcu and "BOARD" in env:
        board_mcu = env.BoardConfig().get("build.mcu")

    env["ENV"]["CARGO_PIO_BUILD_ACTIVE"] = "1"
    env["ENV"]["CARGO_PIO_BUILD_INC_FLAGS"] = env.subst("$_CPPINCFLAGS")
    env["ENV"]["CARGO_PIO_BUILD_LINK_FLAGS"] = env.subst("$_LIBFLAGS")
    env["ENV"]["CARGO_PIO_BUILD_LINKER"] = env.subst("$LINK")
    env["ENV"]["CARGO_PIO_BUILD_LIBS"] = env.subst("$LIBS")
    env["ENV"]["CARGO_PIO_BUILD_MCU"] = board_mcu

    if env.GetProjectOption("rust_bindgen_enabled", default = "false").lower() == "true":
        env["ENV"]["CARGO_PIO_BUILD_BINDGEN_RUN"] = "1"
        env["ENV"]["CARGO_PIO_BUILD_BINDGEN_EXTRA_CLANG_ARGS"] = env.GetProjectOption("rust_bindgen_extra_clang_args", default = "")

    if env.Execute(f"cargo build {'--release' if cargo_profile == 'release' else ''} --lib --target {rust_target} {cargo_options}"):
        Exit(1)

    env.Prepend(LIBPATH = [os.path.join(cargo_target_dir, rust_target, cargo_profile)])
    env.Prepend(LIBS = [rust_lib])
    # A hack to workaround this issue with Rust's compiler intrinsics: https://github.com/rust-lang/compiler-builtins/issues/353
    env.Prepend(LINKFLAGS = "-Wl,--allow-multiple-definition")

env.AddPreAction(os.path.join("$BUILD_DIR", env.subst("$PROGNAME$PROGSUFFIX")), run_cargo)
